@using SEIIApp.Shared.DomainDto
@using SEIIApp.Client.Services
@inject BackendAccessService _backendAccessService

<div align="center">
    @if (Question != null)
    {
        <div style="background-color:#ffedc4;border-style:solid;width: 800px" align="left">
            <p align="center" style="font-size:16pt">@Question.QuestionText</p>
            <br />

                @foreach (var answer in Question.Answers)
                {
                    <input style="margin-left: .5rem" type="checkbox" id="answerCheckbox" disabled="@(answeredRight == true | isFinished == true)" @bind="answer.IsSelected">
                    <label for="answerCheckbox">@answer.AnswerText</label>
                    <br />
                }
            </div>
            <br />
            <button type="button" class="text-white" style="border:thin solid white;background-color:@buttonColor" disabled="@isFinished" @onclick="() => Antworten()">
                <span aria-hidden="true">
                    💡
                </span>Answer
            </button>


            @if (answeredRight == true)
            {
                <br />
                <br />
                <p style="color:green">Your answer was right!</p>
                <button type="button" class="text-white" style="border:thin solid white;background-color:@buttonColor" @onclick="@(() => next.InvokeAsync(true))">
                    <span aria-hidden="true">
                        ⏩
                    </span>Next
                </button>
            }
            @if (answeredWrong == true)
            {
                <br />
                <br />
                <p style="color:red">Your answer was wrong!</p>
                answeredWrong = false;
            }
            }
        </div>

        @code {
            public string buttonColor = "#5470f0";

            [Parameter]
            public QuestionDto Question { get; set; }

            [Parameter]
            public bool isFinished { get; set; }

            [Parameter]
            public EventCallback<bool> next { get; set; }

            [Parameter]
            public int studentId { get; set; }

            public bool answeredWrong { get; set; }
            public bool answeredRight { get; set; }

            public async Task<bool> Antworten()
            {
                var qStatus = await _backendAccessService.GetQuestionStatusByQuestionAndUser(studentId, Question.QuestionId);

                questionStatusTransfer transfer = new questionStatusTransfer() { UserId = studentId, QuestionId = Question.QuestionId };
                foreach (var answer in Question.Answers)
                {
                    if (answer.IsSelected != answer.IsCorrect)
                    {
                        transfer.level = 0;
                        await _backendAccessService.AddOrUpdateQuestionStatus(transfer);

                        answeredWrong = true;
                        return false;
                    }
                }
                if (qStatus == null)
                {
                    transfer.level = 1;
                }
                else
                {
                    transfer.level = qStatus.QuestionLevel + 1;
                }
                await _backendAccessService.AddOrUpdateQuestionStatus(transfer);

                answeredRight = true;
                return true;
            }

            protected override void OnParametersSet()
            {
                base.OnParametersSet();

                answeredWrong = false;
                answeredRight = false;
            }

        }
