@page "/chapterquiz/{UserId:int}/{QuizId:int}"
@using SEIIApp.Shared.DomainDto
@using SEIIApp.Client.Services
@inject BackendAccessService _backendAccessService
@inject NavigationManager NavigationManager

@if (Quiz != null)
{
    <div align="center">
        <h2>
            <b>
                <u>@Quiz.QuizName</u>
            </b>
        </h2>
        <br/>
        <h4>Frage @(questionNumber + 1):</h4>
        <br/>
    </div>
}


@if (Quiz != null)
{
    <div class="container-md">
        <SEIIApp.Client.Components.QuizHelper isFinished="quizFinished" Question="Quiz.Questions[questionNumber]" next="ClickHandler" studentId="@UserId"></SEIIApp.Client.Components.QuizHelper>
    </div>
    @if (quizFinished)
    {
        <div align="center">
            <br/>
            <p style="font-size:16pt;color:green">
                <b>Congratulations! @Quiz.QuizName is finished.</b>
            </p>
            <button type="button" class="text-white" style="font-family: Consolas; border: thin solid white; background-color:  #5470f0" @onclick="RouteToHomepageUser">

                <span aria-hidden="true">
                    🏠
                </span> Home
            </button>
            <br/>
        </div>
    }
}


@code {

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public int QuizId { get; set; }

    public QuizDto Quiz { get; set; }


    public int questionNumber = 0;
    public bool quizFinished = false;

    public async Task ClickHandler(bool next)
    {
        if (next && (questionNumber + 1) < Quiz.Questions.Length)
        {
            questionNumber++;
            StateHasChanged();
        }
        else
        {
            quizFinished = true;
            var ChapterDto = await _backendAccessService.GetChapterByQuizId(QuizId);
            var CourseDto = await _backendAccessService.GetCourseByChapterId(ChapterDto.ChapterId);
            await _backendAccessService.AddOrUpdateQuizStatus(new QuizStatusTransfer() {finished = true, quizId = QuizId, studentId = UserId});
            await _backendAccessService.AddOrUpdateChapterStatus(new chapterStatusTransfer() {ChapterId = ChapterDto.ChapterId, UserId = UserId});
            await _backendAccessService.AddOrUpdateCourseStatus(new CourseStatusTransfer() {CourseId = CourseDto.CourseId, StudentId = UserId});
        }
    }


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Quiz = await _backendAccessService.GetQuizById(QuizId);
    }

    private void RouteToHomepageUser()
    {
        NavigationManager.NavigateTo($"/homepageuser/{UserId}");
    }

}