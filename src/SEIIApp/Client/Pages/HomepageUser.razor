@page "/homepageuser/{UserId:int}"
@using SEIIApp.Shared.DomainDto
@using SEIIApp.Client.Services
@using SEIIApp.Shared.DomainDto.StatusDto
@inject Services.BackendAccessService BackendAccessService
@inject NavigationManager NavigationManager


<h1 style="color:dodgerblue" align="center" xmlns="http://www.w3.org/1999/html">NeoLearn</h1>

<div data-role="fieldcontain">
    <div style="text-align: center">
        <fieldset>
            <label>
                @if (StudentUser != null)
                {
                    <div style="text-align: center">
                        <p style="text-align: center">Willkommen @StudentUser.UserName ! </p>
                    </div>
                }
            </label>
        </fieldset>
    </div>
</div>


<style>
        p {
            width: 15em;
            padding-top: 50px;
        }
</style>


<div style="text-align: center">

    <button class="btn btn-primary" @onclick="RouteToLearning">Start / Continue</button><br/>
    <button class="btn btn-primary" @onclick="RouteToRepetition">Repetitionpage</button><br/>
    <button class="btn btn-primary" @onclick="RouteToCourses">All Courses</button><br/>
</div>

<p>
</p>
@if (LastCourseWorkedOn != null)
{
    <div style="text-align: center">
        <label>You last worked on course @LastCourseWorkedOn.Course.CourseName. Your status:</label>
    </div>

    <div style="text-align: end">
        <div class="progress">
            <div class="progress-bar progress-bar-striped active" role="progressbar"
                 aria-valuenow="@StatusNow" aria-valuemin="0" aria-valuemax="100" style="width:@StatusNow%">
                @StatusNow%
            </div>
        </div>
    </div>
}


<div style="text-align: end">
    <span>&#9993;</span> <a href="mailto:someone@example.com">Send email</a>
</div>

@code {

    [Parameter]
    public int UserId { get; set; }

    private StudentDto StudentUser { get; set; }

    private CourseStatusDto LastCourseWorkedOn { get; set; }

    public double StatusNow { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        StudentUser = await BackendAccessService.GetStudentById(UserId);
        LastCourseWorkedOn = await BackendAccessService.GetLastCourseStatusWorkedOn(UserId);
        StatusNow = LastCourseWorkedOn.FinishStatus * 100;
    }

    private void RouteToCourses()
    {
        NavigationManager.NavigateTo($"/studentcourses/{UserId}");
    }

    private void RouteToRepetition()
    {
        NavigationManager.NavigateTo($"/repetitionpage/{UserId}");
    }

    private async Task RouteToLearning()
    {
        int ChapterId;
        var courses = await BackendAccessService.GetAllEnrolledCourses(StudentUser.UserId);
        if (courses.Length <= 0)
        {
            var list = await BackendAccessService.GetAllChapters();
            ChapterId = list[0].ChapterId;
        }
        else
        {
            var chapterStatus = await BackendAccessService.GetLastChapterWorkedOn(UserId);
            ChapterId = chapterStatus.Chapter.ChapterId;
        }

        NavigationManager.NavigateTo($"/learningpage/{UserId}/{ChapterId}");
    }

}