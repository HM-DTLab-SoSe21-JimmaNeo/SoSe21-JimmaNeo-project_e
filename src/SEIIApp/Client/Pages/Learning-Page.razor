@page "/learningpage/{UserId:int}/{ChapterId:int}"
@using SEIIApp.Shared.DomainDto.StatusDto
@using SEIIApp.Shared.DomainDto
@inject Services.BackendAccessService BackendAccessService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager


<h3 align="center" style="margin:32px">@currentCourseName: @currentChapter</h3>
<br/>
<br/>

<style>
    p {
        width: 30em;
        padding-top: 100px;
    }
</style>


<center>
    <div class="row">
        <div class="col-sm-4">

            <div class="card" style="width: 18rem; min-height: 26rem">
                <img src="Images/PDF.png" class="card-img-top" alt="...">
                <div class="card-body" style="margin:auto">
                    <h5 class="card-title" style="margin:auto">Download PDF-File</h5>
                    <div style="text-align:center">
                        <button type="button" class="text-white" style="margin-top: 24px;border:thin solid white; background-color: @buttonColor" @onclick="() => DownloadContent(pdfContentArray[0])">
                            <span aria-hidden="true">
                                📥
                            </span>PDF
                        </button>
                    </div>
                </div>
            </div>
        </div>


        <div class="col-sm-4">
            <div class="card" style="width: 18rem; min-height: 26rem">
                <img src="Images/Quiz.jpg" class="card-img-top" alt="...">
                <div class="card-body" style="margin:auto">
                    <h5 class="card-title">Go to Quiz</h5><br/><br/><br/>
                    <div style="text-align:center">
                        <button type="button" class="text-white" style="margin-top: 24px;border:thin solid white; background-color: @buttonColor" @onclick="RouteToQuizpage">
                            <span aria-hidden="true">
                                ❔
                            </span>Quiz
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="card" style="width: 18rem; min-height: 26rem">
                <img src="Images/Homepage.jpg" class="card-img-top" alt="...">
                <div class="card-body" style="margin:auto">
                    <br/><br/><br/><h5 class="card-title">Back to Homepage</h5><br/><br/><br/><br/>
                    <div style="text-align:center">
                        <button type="button" class="text-white" style="margin-top: 24px;border:thin solid white; background-color: @buttonColor" @onclick="RouteToHomepageUser">
                            <span aria-hidden="true">
                                🏠
                            </span>Homepage
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</center>


<br/>
<div style="text-align: center">
    <p style="color: red"></p>@ErrorMessage
</div>
<br/>

@if (VideoSource != null)
{
    <div style="text-align: center">

        <iframe width="560" height="315" src="@VideoSource" title="YouTube video player"
                frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen>
        </iframe>
    </div>
}
<br/>

@code
{
    public string buttonColor = "#5470f0";

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public int ChapterId { get; set; }

    public int QuizId { get; set; }

    string currentChapter = "";

    string currentCourseName = "...";

    PdfContentDto[] pdfContentArray = new PdfContentDto[0];

    ChapterDto chapter;

    string VideoSource;

    string ErrorMessage = "";


    private async void DownloadContent(PdfContentDto contentDto)
    {
        var getContent = await BackendAccessService.GetContentById(contentDto.ContentId);

        string[] base64String = getContent.baseString.Split(',');

        await JsRuntime.InvokeVoidAsync("downloadFile", "application/pdf", base64String[1], getContent.ContentName);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        chapter = await BackendAccessService.GetChapterById(ChapterId);
        pdfContentArray = chapter.ChapterContentPdf;
        currentChapter = chapter.ChapterName;

        VideoSource = chapter.ChapterContentVideo.FirstOrDefault()?.Path;

        await BackendAccessService.AddOrUpdateChapterStatus(new chapterStatusTransfer() {ChapterId = chapter.ChapterId, UserId = UserId});

        var course = await BackendAccessService.GetCourseByChapterId(ChapterId);
        var courseId = course.CourseId;
        await BackendAccessService.AddOrUpdateCourseStatus(new CourseStatusTransfer() {CourseId = courseId, StudentId = UserId});

        var currentCourse = await BackendAccessService.GetCourseByChapterId(ChapterId);
        currentCourseName = currentCourse.CourseName;

        StateHasChanged();
    }

    private void RouteToQuizpage()
    {
        if (chapter.ChapterQuiz != null)
        {
            QuizId = chapter.ChapterQuiz.QuizId;
            NavigationManager.NavigateTo($"/chapterquiz/{UserId}/{QuizId}");
        }
        else
        {
            ErrorMessage = "Sorry, this chapter has no quiz.";
        }
    }

    private void RouteToHomepageUser()
    {
        NavigationManager.NavigateTo($"/homepageuser/{UserId}");
    }
}